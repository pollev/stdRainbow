#!/bin/bash


# From: http://stackoverflow.com/questions/15682537/ansi-color-specific-rgb-sequence-bash#15712766
#
# This does exist, but instead of the 16777216 (256^3) colors that the OP was looking for, there are 216 (6^3) equally distributed colors,
# in a larger set of 256 colors. Example:
#
# echo -e "\033[38;5;208mpeach\033[0;00m"
#
# This will output a pleasing sort of peach colored text.
#
# Taking apart this command: \033[38;5;208m
#
# The \033 is the escape code. The [38; directs command to the foreground. If you want to change the background color instead, 
# use [48; instead. The 5; is just a piece of the sequence that changes color. And the most important part, 208m, selects the actual color.
#
# There are 3 sets of colors that can be found in the 256 color sequence for this escape. The first set is the basic "candy" color set, 
# or values 0-15. Then there is a cube of distributed colors, from 16-231. Lastly there is a detailed grayscale set from 232-255.
#
# You can find a table with all of these values here:
# http://bitmote.com/index.php?post/2012/11/19/Using-ANSI-Color-Codes-to-Colorize-Your-Bash-Prompt-on-Linux#256%20(8-bit)%20Colors

COLORCODE="\033[0m"
COLOREND="\033[0;00m"

FREQ=0.3
R=0
G=0
B=0

# color and print a line
print_input() {
  local input=$1
  for (( i=0; i<${#input}; i++ )); do
    #Update the rgb values
    sin
    #Use RGB values to update color code
    rgb_to_8bit $R $G $B
    #Print colored char
    printf "${COLORCODE}${input:$i:1}${COLOREND}"
  done
}


ITER=0
# Advance the sinus wave (radians)
sin ()
{
  #Radians value for this iteration
  local radR="$(echo "$ITER*$FREQ + 0" | bc)"
  local radG="$(echo "$ITER*$FREQ + 2" | bc)"
  local radB="$(echo "$ITER*$FREQ + 4" | bc)"
  #Grab next point on SIN wave
  local sinR="$(echo "scale=5;s($radR)" | bc -l)" #degrees: echo "scale=5;s($1*0.017453293)" | bc -l
  local sinG="$(echo "scale=5;s($radG)" | bc -l)"
  local sinB="$(echo "scale=5;s($radB)" | bc -l)"
  #Scale it to our little 0-5 interval
  local sinR="$(printf %.$2f $(echo "$sinR * (5/2) + 5/2" | bc -l))"
  local sinG="$(printf %.$2f $(echo "$sinG * (5/2) + 5/2" | bc -l))"
  local sinB="$(printf %.$2f $(echo "$sinB * (5/2) + 5/2" | bc -l))"
  
  
  #Update global values
  R=$sinR
  G=$sinG
  B=$sinB

  #Update iteration
  ITER=$(($ITER + 1))
}


# expects red green blue values (from 0 to 5 for each of the 3 colors) and returns
rgb_to_8bit() {
  local code=$((16 + 36 * $1 + 6 * $2 + $3))
  COLORCODE="\033[38;5;${code}m"
}


# while loop
while IFS= read -r -n1 char
do
	print_input "$char"
  if [ "$char" = "" ] 
  then
    echo 
  fi
done


